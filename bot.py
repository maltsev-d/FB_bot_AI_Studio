import os
import requests
from flask import Flask, request, jsonify
from dotenv import load_dotenv

load_dotenv()

app = Flask(__name__)


VERIFY_TOKEN = os.getenv("FB_VERIFY_TOKEN", "your_verify_token")
PAGE_ACCESS_TOKEN = os.getenv("FB_PAGE_TOKEN", "your_page_access_token")

# –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è webhook –æ—Ç Facebook
@app.route('/webhook', methods=['GET'])
def verify():
    mode = request.args.get("hub.mode")
    challenge = request.args.get("hub.challenge")
    token = request.args.get("hub.verify_token")
    if mode == "subscribe" and challenge:
        if token == VERIFY_TOKEN:
            return challenge, 200
        else:
            return "Verification token mismatch", 403
    return "Hello from AI Bots Studio", 200

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Facebook Messenger
def send_message(recipient_id, message_data):
    if not PAGE_ACCESS_TOKEN or PAGE_ACCESS_TOKEN == "your_page_access_token":
        print("PAGE_ACCESS_TOKEN –Ω–µ –∑–∞–¥–∞–Ω, —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        return
    url = f"https://graph.facebook.com/v15.0/me/messages?access_token={PAGE_ACCESS_TOKEN}"
    payload = {
        "recipient": {"id": recipient_id},
        "message": message_data
    }
    headers = {'Content-Type': 'application/json'}
    response = requests.post(url, json=payload, headers=headers)
    if response.status_code != 200:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {response.text}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –º–µ–Ω—é
@app.route('/webhook', methods=['POST'])
def webhook():
    data = request.get_json()
    print(f"Incoming data: {data}")

    if data.get("object") == "page":
        for entry in data.get("entry", []):
            for messaging_event in entry.get("messaging", []):
                sender_id = messaging_event["sender"]["id"]
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                if messaging_event.get("message") and "text" in messaging_event["message"]:
                    text = messaging_event["message"]["text"].lower()
                    handle_message(sender_id, text)
                elif messaging_event.get("postback") and "payload" in messaging_event["postback"]:
                    payload = messaging_event["postback"]["payload"]
                    handle_postback(sender_id, payload)

    return "OK", 200

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
def handle_message(sender_id, text):
    greeting_keywords = ["–ø—Ä–∏–≤–µ—Ç", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π", "hello", "hi"]
    if any(word in text for word in greeting_keywords):
        send_welcome(sender_id)
    elif text in ["1", "—Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞", "—Å–æ–∑–¥–∞—Ç—å"]:
        send_text(sender_id, "–û—Ç–ª–∏—á–Ω–æ, —Ä–∞—Å—Å–∫–∞–∂–∏ –≤–∫—Ä–∞—Ç—Ü–µ, —á—Ç–æ —Ö–æ—á–µ—à—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å? –ß–µ–º —Ç–æ—á–Ω–µ–µ ‚Äî —Ç–µ–º –ª—É—á—à–µ.")
        send_main_menu(sender_id)
    elif text in ["2", "–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ", "–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å"]:
        send_text(sender_id, "–ü–æ–∫–∞–∂–∏, —Å —á–µ–º –≤–æ–∑–Ω–∏–∫–ª–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏. –ü–æ–º–æ–∂–µ–º –¥–æ–≤–µ—Å—Ç–∏ –¥–æ —É–º–∞ –∏ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∏—à–µ–∫.")
        send_main_menu(sender_id)
    elif text in ["3", "—É–∑–Ω–∞—Ç—å –ø—Ä–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏", "–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏"]:
        send_text(sender_id, "–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º —Å Python, GPT, Telethon, –≥–æ–ª–æ—Å–æ–≤—ã–º–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞–º–∏ –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è–º–∏ —Å –ª—é–±—ã–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏. –ú–æ–∂–µ–º –ø–æ—á—Ç–∏ –≤—Å—ë.")
        send_main_menu(sender_id)
    elif text in ["4", "—Å–≤—è–∑–∞—Ç—å—Å—è —Å —ç–∫—Å–ø–µ—Ä—Ç–æ–º", "—ç–∫—Å–ø–µ—Ä—Ç"]:
        send_text(sender_id, "–û—Å—Ç–∞–≤—å –∫–æ–Ω—Ç–∞–∫—Ç—ã ‚Äî —Å —Ç–æ–±–æ–π —Å–≤—è–∂–µ—Ç—Å—è —Ä–µ–∞–ª—å–Ω—ã–π —á–µ–ª–æ–≤–µ–∫, –∞ –Ω–µ –±–æ—Ç (–Ω—É, –ø–æ—á—Ç–∏).")
        send_main_menu(sender_id)
    else:
        send_text(sender_id, "–ò–∑–≤–∏–Ω–∏, –Ω–µ –ø–æ–Ω—è–ª. –í—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ.")
        send_main_menu(sender_id)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ postback
def handle_postback(sender_id, payload):
    if payload == "CREATE_BOT":
        send_text(sender_id, "–û—Ç–ª–∏—á–Ω–æ, —Ä–∞—Å—Å–∫–∞–∂–∏ –≤–∫—Ä–∞—Ç—Ü–µ, —á—Ç–æ —Ö–æ—á–µ—à—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å? –ß–µ–º —Ç–æ—á–Ω–µ–µ ‚Äî —Ç–µ–º –ª—É—á—à–µ.")
        send_main_menu(sender_id)
    elif payload == "CONFIGURE_BOT":
        send_text(sender_id, "–ü–æ–∫–∞–∂–∏, —Å —á–µ–º –≤–æ–∑–Ω–∏–∫–ª–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏. –ü–æ–º–æ–∂–µ–º –¥–æ–≤–µ—Å—Ç–∏ –¥–æ —É–º–∞ –∏ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∏—à–µ–∫.")
        send_main_menu(sender_id)
    elif payload == "LEARN_CAPABILITIES":
        send_text(sender_id, "–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º —Å Python, GPT, Telethon, –≥–æ–ª–æ—Å–æ–≤—ã–º–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞–º–∏ –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è–º–∏ —Å –ª—é–±—ã–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏. –ú–æ–∂–µ–º –ø–æ—á—Ç–∏ –≤—Å—ë.")
        send_main_menu(sender_id)
    elif payload == "CONTACT_EXPERT":
        send_text(sender_id, "–û—Å—Ç–∞–≤—å –∫–æ–Ω—Ç–∞–∫—Ç—ã ‚Äî —Å —Ç–æ–±–æ–π —Å–≤—è–∂–µ—Ç—Å—è —Ä–µ–∞–ª—å–Ω—ã–π —á–µ–ª–æ–≤–µ–∫, –∞ –Ω–µ –±–æ—Ç (–Ω—É, –ø–æ—á—Ç–∏).")
        send_main_menu(sender_id)
    else:
        send_text(sender_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é.")
        send_main_menu(sender_id)

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ + –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
def send_welcome(recipient_id):
    text = ("–ü—Ä–∏–≤–µ—Ç! –¢—ã –≤ AI Bots Studio ‚Äî –∑–¥–µ—Å—å —Ä–æ–∂–¥–∞—é—Ç—Å—è —É–º–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É—é—Ç, –∏–Ω—Ç–µ–≥—Ä–∏—Ä—É—é—Ç –∏ –¥–∞—é—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç. "
            "–ß—Ç–æ —Å–µ–≥–æ–¥–Ω—è —Å–æ–±–∏—Ä–∞–µ–º—Å—è –ø—Ä–æ–∫–∞—á–∞—Ç—å?")
    buttons = [
        {"type": "postback", "title": "üöÄ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞", "payload": "CREATE_BOT"},
        {"type": "postback", "title": "üîß –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ", "payload": "CONFIGURE_BOT"},
        {"type": "postback", "title": "üìö –£–∑–Ω–∞—Ç—å –ø—Ä–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏", "payload": "LEARN_CAPABILITIES"},
        {"type": "postback", "title": "üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å —ç–∫—Å–ø–µ—Ä—Ç–æ–º", "payload": "CONTACT_EXPERT"}
    ]
    send_button_template(recipient_id, text, buttons)

# –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é (—Ç–æ –∂–µ —Å–∞–º–æ–µ)
def send_main_menu(recipient_id):
    text = "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:"
    buttons = [
        {"type": "postback", "title": "üöÄ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞", "payload": "CREATE_BOT"},
        {"type": "postback", "title": "üîß –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ", "payload": "CONFIGURE_BOT"},
        {"type": "postback", "title": "üìö –£–∑–Ω–∞—Ç—å –ø—Ä–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏", "payload": "LEARN_CAPABILITIES"},
        {"type": "postback", "title": "üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å —ç–∫—Å–ø–µ—Ä—Ç–æ–º", "payload": "CONTACT_EXPERT"}
    ]
    send_button_template(recipient_id, text, buttons)

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞
def send_text(recipient_id, text):
    message = {"text": text}
    send_message(recipient_id, message)

# –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–Ω–æ–ø–æ–∫ —à–∞–±–ª–æ–Ω–∞
def send_button_template(recipient_id, text, buttons):
    message = {
        "attachment": {
            "type": "template",
            "payload": {
                "template_type": "button",
                "text": text,
                "buttons": buttons
            }
        }
    }
    send_message(recipient_id, message)

if __name__ == '__main__':
    app.run(debug=True, port=5000)
