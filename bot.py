import os
import requests
from flask import Flask, request, jsonify
import json

app = Flask(__name__)

# –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å —Ç–æ–∫–µ–Ω–æ–º –∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–º –∫–æ–¥–æ–º
VERIFY_TOKEN = os.getenv("FB_VERIFY_TOKEN", "your_verify_token")  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
PAGE_ACCESS_TOKEN = os.getenv("FB_PAGE_TOKEN", "your_page_access_token")  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω —Å—Ç—Ä–∞–Ω–∏—Ü—ã

# Facebook Webhook Verification
@app.route('/webhook', methods=['GET'])
def verify():
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞
    if request.args.get("hub.mode") == "subscribe" and request.args.get("hub.challenge"):
        if request.args.get("hub.verify_token") == VERIFY_TOKEN:
            return request.args["hub.challenge"], 200
        return "Verification token mismatch", 403
    return "Hello, this is the webhook", 200

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@app.route('/webhook', methods=['POST'])
def webhook():
    data = request.get_json()
    print(f"Received data: {json.dumps(data, indent=2)}")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥—è—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏

    if data.get("object") == "page":
        for entry in data["entry"]:
            for messaging_event in entry["messaging"]:
                sender_id = messaging_event["sender"]["id"]
                if messaging_event.get("message"):
                    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
                    send_greeting(sender_id)
                    send_buttons(sender_id)
                    send_quick_replies(sender_id)

    return "OK", 200

# –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
def send_greeting(recipient_id):
    message_data = {
        "recipient": {"id": recipient_id},
        "message": {
            "text": "–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à—É —à–∞—É—Ä–º—É-–∏–º–ø–µ—Ä–∏—é! üçó"
        }
    }
    call_send_api(message_data)

# –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–Ω–æ–ø–æ–∫
def send_buttons(recipient_id):
    message_data = {
        "recipient": {"id": recipient_id},
        "message": {
            "attachment": {
                "type": "template",
                "payload": {
                    "template_type": "button",
                    "text": "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å?",
                    "buttons": [
                        {
                            "type": "postback",
                            "title": "–®–∞—É—Ä–º–∞ —Å –∫—É—Ä–∏—Ü–µ–π",
                            "payload": "SHAVERMA_CHICKEN"
                        },
                        {
                            "type": "postback",
                            "title": "–®–∞—É—Ä–º–∞ —Å –≥–æ–≤—è–¥–∏–Ω–æ–π",
                            "payload": "SHAVERMA_BEEF"
                        },
                        {
                            "type": "postback",
                            "title": "–®–∞—É—Ä–º–∞ —Å –æ–≤–æ—â–∞–º–∏",
                            "payload": "SHAVERMA_VEG"
                        }
                    ]
                }
            }
        }
    }
    call_send_api(message_data)

# –û—Ç–ø—Ä–∞–≤–∫–∞ quick replies
def send_quick_replies(recipient_id):
    message_data = {
        "recipient": {"id": recipient_id},
        "message": {
            "text": "–í—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å —Å–µ–π—á–∞—Å?",
            "quick_replies": [
                {
                    "content_type": "text",
                    "title": "–î–∞, —Ö–æ—á—É!",
                    "payload": "ORDER_YES"
                },
                {
                    "content_type": "text",
                    "title": "–ù–µ —Å–µ–π—á–∞—Å",
                    "payload": "ORDER_NO"
                }
            ]
        }
    }
    call_send_api(message_data)

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ API
def call_send_api(message_data):
    response = requests.post(
        f'https://graph.facebook.com/v12.0/me/messages?access_token={PAGE_ACCESS_TOKEN}',
        json=message_data
    )
    if response.status_code != 200:
        print(f"Failed to send message: {response.text}")

if __name__ == '__main__':
    app.run(debug=True, port=5000)